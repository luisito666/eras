var ACL,
  Subject,
  _,
  subjects_obj,
  bind = function(fn, me) {
    return function() {
      return fn.apply(me, arguments);
    };
  },
  extend = function(child, parent) {
    for (var key in parent) {
      if (hasProp.call(parent, key)) child[key] = parent[key];
    }
    function ctor() {
      this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
    child.__super__ = parent.prototype;
    return child;
  },
  hasProp = {}.hasOwnProperty;

subjects_obj = {
  subject_a: {
    acls: ["is_admin"],
    permissions: ["*:*"]
  },
  subject_b: {
    acls: ["is_user"],
    permissions: ["User:read", "User:create", "User:update"]
  },
  subject_c: {
    acls: {
      $or: ["is_admin", "is_user"]
    },
    permissions: ["Settings:*"]
  }
};

_ = require("underscore");

ACL = require("./acl");

Subject = (function(superClass) {
  extend(Subject, superClass);

  function Subject() {
    this._getFromAdapters = bind(this._getFromAdapters, this);
    this._concatenatePermissions = bind(this._concatenatePermissions, this);
    this.validate = bind(this.validate, this);
    this.permissions = bind(this.permissions, this);
    this.initiliaze = bind(this.initiliaze, this);
    return Subject.__super__.constructor.apply(this, arguments);
  }

  Subject.prototype.initiliaze = function(options) {
    Subject.__super__.initiliaze.apply(this, arguments);
    return (this.resource = {});
  };

  Subject.prototype.permissions = function(ensure, callback) {
    this.ensure = ensure;
    return this.validate(
      ensure,
      this.subject,
      (function(_this) {
        return function(result) {
          return callback(result);
        };
      })(this)
    );
  };

  Subject.prototype.validate = function(ensure, sub, callback) {
    var ref, res, result, subject_acl, subject_match, subject_name, value;
    this.ensure = ensure;
    subject_match = [];
    ref = this._getFromAdapters();
    for (subject_name in ref) {
      value = ref[subject_name];
      subject_acl = false;
      if (value.acls != null) {
        subject_acl = this._validate(value.acls);
      }
      if (!subject_acl) {
        continue;
      }
      res = {
        subject: subject_name,
        permissions: value.permissions
      };
      subject_match.push(res);
    }
    result = {
      match: _.pluck(subject_match, "subject"),
      permissions: this._concatenatePermissions(
        _.pluck(subject_match, "permissions")
      )
    };

    const perms = "(" + result.permissions.join("|") + ")";
    
    console.log(perms)
    
    if (perms === '/(*:*)/') {
      perms = '/([\*|a-z]:[\*|a-z])/'
      const regexp = new RegExp(perms.replace(/\//g, ''));
      result.compiled = regexp.toString();
      return callback(result);
    }

    const regexp = new RegExp(perms.replace(/\//g, ''));
    result.compiled = regexp.toString();
    return callback(result);
  };

  Subject.prototype._concatenatePermissions = function(permissions) {
    var i, len, perms, result, temp;
    result = [];
    for (i = 0, len = permissions.length; i < len; i++) {
      perms = permissions[i];
      if (perms instanceof Array) {
        temp = result.concat(perms);
        result = temp;
      } else {
        result.push(perms);
      }
    }
    return result;
  };

  Subject.prototype._getFromAdapters = function(subject) {
    var adapter, name, ref, subjects;
    ref = this.ensure._adapters;
    for (name in ref) {
      adapter = ref[name];
      subjects = adapter.findSubject(subject);
      if (subjects != null) {
        return subjects;
      }
    }
  };

  return Subject;
})(ACL);

module.exports = Subject;

// ---
// generated by coffee-script 1.9.2
